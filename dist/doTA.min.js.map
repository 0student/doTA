{"version":3,"sources":["doTA.js"],"names":["doTA","S","k","h","d","f","indexOf","charAt","closeTag","substring","comment","c","g","a","n","v","l","b","q","slice","length","replace","toLowerCase","openTag","voidTag","text","D","console","error","document","getElementById","setAttribute","String","prototype","trim","this","Object","watch","unwatch","T","U","V","W","X","Y","Z","N","C","A","M","diff","H","firstChild","nodeType","nodeValue","diff2","createElement","substr","lastIndexOf","innerHTML","parentNode","replaceChild","insertBefore","createTextNode","appendChild","getId","initCH","compile","B","match","G","e","push","r","O","E","P","loose","watchDiff","diffLevel","$index","undefined","$attr","Math","Date","Array","Infinity","NaN","var","in","true","false","null","void","J","w","t","L","I","dotaRender","Q","strip","encode",">","<","p","y","m","skip","F","x","K","z","u","refresh","elif","exec","test","event","value","id","R","expand","join","optimize","debug","log","Function","module","exports","noop","time","timeEnd"],"mappings":"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","file":"doTA.min.js","sourcesContent":["var doTA = (function() {'use strict';\n  /* for ie8 */\n  if (!String.prototype.trim) {\n    String.prototype.trim = function() {\n      return this.replace(/^\\s+|\\s+$/g,'');\n    };\n  }\n\n  /* no, thanks! firefox */\n  if (Object.prototype.watch) {\n    delete Object.prototype.watch;\n    delete Object.prototype.unwatch;\n  }\n\n  // pretty indent for debugging\n  function indent(n, x) {\n    var ret = new Array(n + 2).join('    ');\n    return x ? ret.slice(0, -2 * x) : ret;\n  }\n\n  // decode html entities\n  function decodeEntities(text) {\n    return text.indexOf('&') < 0 ? text : text\n      .replace(/&gt;/g, '>').replace(/&lt;/g, '<')\n      .replace(/&amp;/g, '&').replace(/&quot;/g, '\"');\n  }\n\n  // parse attributes from html open tag and make dict object\n  function parseAttr(chunk, func) {\n    var attr = {}, tagName;\n    var pos = chunk.indexOf(' ');\n    var len, attrName, attrVal;\n    var valStart, valEndPos;\n\n    if (pos !== -1) {\n      tagName = chunk.slice(0, pos);\n      len = chunk.length;\n\n      //console.log(222, [pos, chunk]);\n      while (++pos < len) {\n        var eqPos = chunk.indexOf('=', pos);\n\n        // ** attribute without value (last attribute) **\n        if (eqPos === -1) {\n          attrName = chunk.slice(pos);\n          // console.log('eqPos === -1', [attrName, pos, chunk])\n          if (attrName !== '/') {\n            attr[attrName] = '';\n          }\n          //attr required will be required=\"\", while is valid syntax\n          //http://www.w3.org/TR/html-markup/syntax.html#syntax-attr-empty\n          break;\n        }\n\n        // uncomment this if you need no value attribute in the middle\n        // ** attribute without value (middle attribute) **\n        // var sp_pos = chunk.indexOf(' ', pos);\n        // if (sp_pos > 0 && sp_pos < eqPos) {\n        //   attr[chunk.slice(pos, sp_pos)] = \"\";\n        //   pos = sp_pos;\n        //   continue;\n        // }\n\n        //console.log(33, [eqPos]);\n        attrName = chunk.slice(pos, eqPos);\n        //console.log(331, [attrName]);\n\n        valStart = chunk[eqPos + 1];\n        //console.log(332, [valStart]);\n\n        //if attribute value is start with quote\n        if (valStart === '\"' || valStart === \"'\") {\n          valEndPos = chunk.indexOf(valStart, eqPos + 2);\n          if (valEndPos < 0) { throw 'ERR:Invalid HTML: [' + chunk + ']'; }\n\n          attrVal =  chunk.slice(eqPos + 2, valEndPos);\n          attr[attrName] =0>attrVal.indexOf(\"&\")?attrVal:attrVal.replace(/&gt;/g,\">\").replace(/&lt;/g,\"<\").replace(/&amp;/g,\"&\").replace(/&quot;/g,'\"'); //INLINE;\n          pos = valEndPos + 1;\n          //console.log(311, [valEndPos, attrName, attrVal]);\n        } else {\n\n          valEndPos = chunk.indexOf(' ', eqPos + 2);\n\n          //when no more attributes\n          if (valEndPos < 0) {\n            attrVal =  chunk.slice(eqPos + 1);\n            attr[attrName] =0>attrVal.indexOf(\"&\")?attrVal:attrVal.replace(/&gt;/g,\">\").replace(/&lt;/g,\"<\").replace(/&amp;/g,\"&\").replace(/&quot;/g,'\"'); //INLINE;\n            //console.log(442, [attrVal]);\n            break;\n\n          } else {\n            attrVal =  chunk.slice(eqPos + 1, valEndPos);\n            attr[attrName] =0>attrVal.indexOf(\"&\")?attrVal:attrVal.replace(/&gt;/g,\">\").replace(/&lt;/g,\"<\").replace(/&amp;/g,\"&\").replace(/&quot;/g,'\"'); //INLINE;\n            //console.log(313, [eqPos, valEndPos, attrVal]);\n            pos = valEndPos;\n          }\n        }\n      }\n\n      tagName = tagName.toLowerCase();\n      if (tagName === 'input' || tagName === 'img') {\n        //http://www.w3.org/TR/html-markup/syntax.html\n        //area, base, br, col, command, embed, hr, img, input, keygen, link, meta, param, source, track, wbr\n        func.openTag(tagName, attr, 1);\n        func.voidTag();\n      } else if (attrName === '/') {\n        func.openTag(tagName, attr);\n        func.closeTag(tagName);\n      } else {\n        func.openTag(tagName, attr);\n      }\n\n    // no attributes\n    } else {\n\n      // self closing, explicit\n      if (chunk.charAt(chunk.length - 1) === '/') {\n        tagName = chunk.slice(0, -1).toLowerCase();\n\n        if (tagName === 'br' || tagName === 'hr') {\n          func.openTag(tagName, attr, 1);\n          func.voidTag();\n        } else {\n          func.openTag(tagName, attr);\n          func.closeTag(tagName);\n        }\n      } else {\n        tagName = chunk.toLowerCase();\n\n        // self closing, implicit\n        if (tagName === 'br' || tagName === 'hr') {\n          func.openTag(tagName, attr, 1);\n          func.voidTag();\n        } else {\n          func.openTag(tagName, attr);\n        }\n      }\n    }\n\n  }\n\n  var events = ' change click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste ';\n  var valid_chr = '_$abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n  // minimal stripped down html parser\n  function parseHTML(html, func) {\n    if (!html) { return; }\n    var prevPos = 0, pos = html.indexOf('<');\n    do {\n      if (html.charAt(pos) === '<') {\n        pos++;\n        if (html.charAt(pos) === '/') {\n          prevPos = ++pos;\n          pos = html.indexOf('>', prevPos);\n          //close tag must be like </div>, but not <div />\n          // console.log(['closetag', prevPos, pos, html.substring(prevPos, pos)])\n          func.closeTag(html.substring(prevPos, pos));\n        } else if (html.charAt(pos) === '!') {\n          prevPos = pos;\n          pos = html.indexOf('>', prevPos);\n          // console.log(['comment', prevPos, pos, html.substring(prevPos, pos)])\n          func.comment(html.substring(prevPos, pos));\n        } else {\n          prevPos = pos;\n          pos = html.indexOf('>', prevPos);\n          // console.log(['opentag', prevPos, pos, html.substring(prevPos, pos), parseAttr(html.substring(prevPos, pos))])\n          // func.openTag.apply(this, parseAttr(html.substring(prevPos, pos)));\n          parseAttr(html.substring(prevPos, pos), func);\n        }\n      } else if (html.charAt(pos) === '>') { //&& html.charAt(pos + 1) !== '<'\n        prevPos = ++pos;\n        pos = html.indexOf('<', prevPos);\n        if (pos > prevPos) {\n          // console.log(['text', prevPos, pos, html.substring(prevPos, pos)])\n          func.text(html.substring(prevPos, pos));\n        }\n      } else {\n        console.error('Parse ERR?', [prevPos, pos, html.substring(prevPos, pos), html.slice(pos)]);\n        break;\n      }\n\n    } while (pos > 0);\n  }\n\n  //diff and patch dom with exact same structure\n  function diffPatchExact(prevKey, html2) {\n    var html1 = doTA.H[prevKey];\n    var prevPos1 = 0, pos1 = html1.indexOf('<');\n    var prevPos2 = 0, pos2 = html2.indexOf('<');\n    var tagId = '', elem, part1, part2;\n    var posx, endPosx;\n\n    do {\n      if (html1.charAt(pos1) === \"<\") {\n        pos1++;\n        pos2++;\n        if (html1.charAt(pos1) === \"/\" || html1.charAt(pos1) === \"!\") {\n          //don't patch comment node and close tag.\n          pos1 = html1.indexOf('>', pos1);\n          pos2 = html2.indexOf('>', pos2);\n        } else {\n          prevPos1 = pos1;\n          prevPos2 = pos2;\n          pos1 = html1.indexOf('>', prevPos1);\n          pos2 = html2.indexOf('>', prevPos2);\n          part1 = html1.substring(prevPos1, pos1);\n          part2 = html2.substring(prevPos2, pos2);\n          //attributes\n          if (part1 !== part2) {\n            // console.log('openTag', [part1, part2])\n            tagId = parsePatchAttr(part1, part2);\n          } else {\n            //record id\n            //tagId = getTagId(part1);\n            posx = part1.indexOf(' id=\"');\n            0 <= posx && (posx += 5, endPosx = part1.indexOf('\"', posx), tagId = part1.substring(posx, endPosx));\n          }\n        }\n\n      //text node\n      } else if (html1.charAt(pos1) === '>') {\n        prevPos1 = ++pos1;\n        prevPos2 = ++pos2;\n\n        pos1 = html1.indexOf('<', prevPos1);\n        pos2 = html2.indexOf('<', prevPos2);\n        //textNode, only support firstChild here\n        if (pos2 > prevPos2) {\n          var text1 = html1.substring(prevPos1, pos1);\n          var text2 = html2.substring(prevPos2, pos2);\n          if (text1 !== text2) {\n            elem = document.getElementById(tagId);\n            if (elem) {\n              if (elem.firstChild && elem.firstChild.nodeType === 3) {\n                // console.log('textApplied', [text1, text2]);\n                elem.firstChild.nodeValue = text2;\n              } //else to log something?\n            } else {\n              console.log('tag not found', [tagId]);\n            }\n          }\n        }\n\n      }\n\n    } while(pos1 > 0);\n  }\n\n  // find position of outerHTML end\n  // this function will be inline during building\n  function getOuterHTMLEnd(HTML, START_POS) {\n    var LVL = 1, POS = START_POS;\n    for(;;) {\n      POS = HTML.indexOf('>', POS);\n      if (HTML.charAt(POS - 1) === '/') { //self closing\n        LVL--;\n        if (LVL <= 0) break;\n      }\n      POS = HTML.indexOf('<', POS);\n      if (HTML.charAt(POS + 1) === '/') {\n        LVL--;\n        if (LVL <= 0) {\n          POS = HTML.indexOf('>', POS + 2);\n          break;\n        }\n      } else if (HTML.charAt(POS + 1) !== '!') {\n        LVL++;\n      }\n      // console.log('LVL', LVL);\n    }\n\n    // console.log('getOutHTML', tagName, [tagName, pos2, pos2, ])\n    return ++POS;\n  }\n\n  // FlatDOM: diff html as text and patch dom nodes\n  function diffPatchChildren(prevKey, html2) {\n    var html1 = doTA.H[prevKey];\n    var prevPos1 = 0, pos1 = html1.indexOf('<');\n    var prevPos2 = 0, pos2 = html2.indexOf('<');\n    var tagId1, tagId2, elem1, part1, part2;\n    // var tagNo1 = 0, tagNo2 = 0;\n    var newNode = document.createElement('div');\n    var tagStartPos1, tagStartPos2;\n    var LVL; //this is needed for fnInline\n    // console.log(html1);\n    // console.log(html2);\n\n    for (;;) {\n      // console.log('before', [dirty1, dirty2], [tagId1, tagId2], [html1.substr(pos1, 20), html2.substr(pos2, 20)]);\n\n      if (pos1 >= 0) {\n        pos1 = html1.indexOf(' id=\"', pos1);\n        if (pos1 > 0) {\n          prevPos1 = pos1 + 5;\n          pos1 = html1.indexOf('\"', prevPos1);\n          tagId1 = html1.substring(prevPos1, pos1);\n          // tagNo1 = tagId1^0;\n        }\n      }\n\n      // console.log('middle', [tagId1, tagId2], [html1.substr(pos1, 20), html2.substr(pos2, 20)]);\n\n      if (pos2 >= 0) {\n        pos2 = html2.indexOf(' id=\"', pos2);\n        if (pos2 > 0) {\n          prevPos2 = pos2 + 5;\n          pos2 = html2.indexOf('\"', prevPos2);\n          tagId2 = html2.substring(prevPos2, pos2);\n          // tagNo2 = tagId2^0;\n        }\n      }\n\n      // console.log('after', [dirty1, dirty2], [tagId1, tagId2],\n      //   [pos1, pos2], [html1.substr(pos1, 20), html2.substr(pos2, 20)]);\n\n      //exist inifite loop\n      if (pos1 < 0 || pos2 < 0) break;\n\n      //same node\n      if (tagId1 === tagId2) {\n        tagStartPos1 = ++pos1;\n        pos1 = html1.indexOf('>', pos1);\n        part1 = html1.substring(tagStartPos1, pos1);\n\n        tagStartPos2 = ++pos2;\n        pos2 = html2.indexOf('>', pos2);\n        part2 = html2.substring(tagStartPos2, pos2);\n\n        // console.log('same node', [part1, part2]);\n\n        //attr really different\n        if (part1 !== part2) {\n          elem1 = document.getElementById(tagId1);\n          //nodes to be inserted or deleted\n          if ((part1.substr(1, 6) === 'hidden') !== (part2.substr(1, 6) === 'hidden')) {\n            tagStartPos2 = html2.lastIndexOf('<', pos2 - 6);\n            LVL=1,pos2=tagStartPos2;for(;;){pos2=html2.indexOf(\">\",pos2);if(\"/\"===html2.charAt(pos2-1)&&(LVL--,0>=LVL))break;pos2=html2.indexOf(\"<\",pos2);if(\"/\"===html2.charAt(pos2+1)){if(LVL--,0>=LVL){pos2=html2.indexOf(\">\",pos2+2);break}}else\"!\"!==html2.charAt(pos2+1)&&LVL++} //INLINE\n            newNode.innerHTML = html2.substring(tagStartPos2, pos2);\n\n            // tagStartPos1 = html1.lastIndexOf('<', pos1 - 6);\n            // console.warn('replaceChild', [tagId2, tagId1], [\n            //   html2.substring(tagStartPos2, getOuterHTMLEnd(html2, tagStartPos2)),\n            //   html1.substring(tagStartPos1, getOuterHTMLEnd(html1, pos1))]);\n\n            elem1.parentNode.replaceChild(newNode.firstChild, elem1);\n\n            LVL=1,pos1=pos1;for(;;){pos1=html1.indexOf(\">\",pos1);if(\"/\"===html1.charAt(pos1-1)&&(LVL--,0>=LVL))break;pos1=html1.indexOf(\"<\",pos1);if(\"/\"===html1.charAt(pos1+1)){if(LVL--,0>=LVL){pos1=html1.indexOf(\">\",pos1+2);break}}else\"!\"!==html1.charAt(pos1+1)&&LVL++} //INLINE\n\n          //only attribute changes\n          } else {\n            if (elem1) {\n              parsePatchAttr(part1, part2, elem1);\n              // console.warn('patch node', [tagId1, tagId2], [pos1, pos2], [tagStartPos1, tagStartPos2], [part1, part2])\n            } else {\n              /**/console.error('elem not found', [tagId1, tagId2], [part1, part2]);\n              throw \"no elem found\";\n            }\n          }\n        } else {\n          //clear node for textNode\n          elem1 = void 0;\n        }\n\n        //if blank text node, skip early\n        if (html1.charAt(pos1 + 1) === '<' && html2.charAt(pos2 + 1) === '<') {\n          pos1++, pos2++;\n          continue;\n        }\n\n        prevPos1 = pos1;\n        pos1 = html1.indexOf('<', prevPos1);\n        part1 = html1.substring(prevPos1 + 1, pos1);\n        prevPos2 = pos2;\n        pos2 = html2.indexOf('<', prevPos2);\n        part2 = html2.substring(prevPos2 + 1, pos2);\n\n        //for text node really diff\n        if (part1 !== part2) {\n          // console.log('text diff', [tagId1, tagId2], [part1, part2]);\n          if (!elem1) {\n            elem1 = document.getElementById(tagId1);\n            if (!elem1) {\n              /** */console.error('node not found', [tagId1, tagId2], [part1, part2], [html1.substr(pos1, 15), html2.substr(pos2, 15)], [html1, html2]);\n            }\n          }\n          // console.log('part1,2', [part1, part2]);\n          if (elem1.firstChild) {\n            //overwrite textNode value\n            if (elem1.firstChild.nodeType === 3) {\n              elem1.firstChild.nodeValue = part2;\n              // console.warn('textNode overwritten', elem1, elem1.firstChild)\n\n            //not textNode, so, insertBefore\n            } else {\n              elem1.insertBefore(document.createTextNode(part2), elem1.firstChild);\n              // console.warn('textNode inserted', elem1, elem1.firstChild)\n            }\n\n          //no childNodes, so append one\n          } else {\n            elem1.appendChild(document.createTextNode(part2));\n          }\n        }\n      } else {\n        throw \"different Id - not supported for now!\";\n      }\n\n    } //infinite loop\n\n  }\n\n  // parse attributes from html open tag and patch DOM when different\n  function parsePatchAttr(chunkA, chunkB, elem) {\n    var tagId;\n    var posA1, posA2, posB1, posB2;\n    var posDiff = 0;\n    var attrName, attrVal1, attrVal2;\n    // var len1 = chunk1.length;\n    // console.log('chunks', [chunkA, chunkB]);\n\n    //extract id to tag, if no elem specified\n    if (!elem) {\n      posA1 = chunkA.indexOf(' id=\"', posA1);\n      if (posA1 >= 0) {\n        posA1 += 5;\n        posA2 = chunkA.indexOf('\"', posA1);\n        tagId = chunkA.slice(posA1, posA2);\n        elem = document.getElementById(tagId);\n        if (!elem) {\n          throw console.error('tag not found', [posA1, posA2, tagId, elem, chunkA, chunkB]);\n        }\n        posA2 += 2;\n      } else {\n        throw console.error('id not found', [posA1, posA1, chunkA, chunkB]);\n      }\n    } else {\n      //first char is always space\n      posA2 = posB2 = 1;\n    }\n\n    for(;;) {\n      //attr name\n      posA1 = chunkA.indexOf('=\"', posA2);\n      if (posA1 < 0) break;\n      attrName = chunkA.slice(posA2, posA1);\n\n      //attr values\n      posA2 = chunkA.indexOf('\"', posA1 + 2);\n      attrVal1 =  chunkA.slice(posA1 + 2, posA2);\n\n      posB1 = posA1 + posDiff;\n      posB2 = chunkB.indexOf('\"', posB1 + 2);\n      attrVal2 =  chunkB.slice(posB1 + 2, posB2);\n\n      if (attrVal1 !== attrVal2) {\n        // console.log('setAttribute', [attrName, attrVal1, attrVal2], [chunk1, chunk2])\n        elem.setAttribute(attrName, attrVal2);\n        posDiff = posB2 - posA2;\n      }\n\n      posA2 += 2;\n    }\n\n    return tagId;\n  }\n\n  // extract value of id from part of html open tag\n  // only id=\"xxx\" supported, this is internal use, so it's always double-quotes\n  // this function is inlined during building\n  function getTagId(partial, start) {\n    var pos = partial.indexOf(' id=\"', start), endPos;\n    if (pos >= 0) {\n      pos += 5;\n      endPos = partial.indexOf('\"', pos);\n      return partial.substring(pos, endPos);\n    }\n  }\n\n  // split filters into array, take care of | and || as different\n  function splitFilters(input) {\n    var pos = input.indexOf('|');\n    if (pos === -1) {\n      return [input];\n    }\n    var prevPos = 0;\n    var ret = [];\n    while (pos !== -1) {\n      if (input.charAt(pos + 1) === '|') {\n        pos += 2;\n      } else {\n        ret.push(input.substring(prevPos, pos));\n        prevPos = ++pos;\n      }\n      pos = input.indexOf('|', pos);\n    }\n    if (prevPos < input.length) {\n      ret.push(input.substr(prevPos));\n    }\n    return ret;\n  }\n\n  // ToDo: check compile performance with regex\n  var ngClassRegex = /('[^']+'|\"[^\"]+\"|[\\w$]+)\\s*:\\s*((?:[$.\\w]+|\\([^)]+\\)|[^},])+)/g;\n  var varOrStringRegex = /'[^']*'|\"[^\"]*\"|[\\w$]+|[^\\w$'\"]+/g;\n  var quotedStringRegex = /\"[^\"]*\"|'[^']*'/g;\n  var whiteSpaceRegex = /\\s{2,}|\\n/g;\n  var removeUnneededQuotesRegex = /\\b([\\w_-]+=)\"([^\"'\\s]+)\"(?=[\\s>])/g;\n  var lazyNgAttrRegex = /^(?:src|alt|title|href)/;\n  // https://github.com/kangax/html-minifier/issues/63\n  var noValAttrRegex = /^(?:checked|selected|disabled|readonly|multiple|required|hidden|nowrap)/;\n  var $indexRegex = /\\$index/g;\n\n  // exported as doTA.compile\n  function compileHTML(template, options) {\n    options = options || {};\n    var val_mod = options.loose ? \"||''\" : '';\n    var watchDiff = options.watchDiff;\n    var diffLevel = +options.diffLevel;\n    var VarMap = {$index: 1, undefined: 1, $attr: 1,\n      Math: 1, Date: 1, String: 1, Object: 1, Array: 1, Infinity: 1, NaN: 1,\n      // alert: 1, confirm: 1, prompt: 1,\n      var: 1, in: 1,\n      true: 1, false: 1, null: 1, void: 1};\n    var level = 0, ngRepeatLevel;\n    var ngIfLevel, skipLevel, ngIfCounterTmp, ngIfLevels = [], ngIfLevelMap = {};\n    var LevelMap = {}, LevelVarMap = {};\n    var WatchMap = {}, Watched;\n    var doTAPass, doTAContinue;\n    var compiledFn;\n    var uniqueId = this.getId(options.dotaRender);\n    var idHash = {};\n\n    var FnText = indent(level) + \"'use strict';var \" +\n      (watchDiff ? 'N=1,J=' + uniqueId + ',' : '') +\n      \"R='';\\n\"; //ToDO: check performance on var declaration\n\n    //clean up extra white spaces and line break\n    template = template.replace(whiteSpaceRegex, ' ');\n\n    if (options.strip) {\n      template = template.replace(/>\\s+/g, '>').replace(/\\s+</g, '<');\n    }\n\n    // when encode is set, find strings and encode < and >, or parser will throw error.\n    if (options.encode) {\n      template = template.replace(quotedStringRegex, function($0) {\n        return $0.replace(/[<>]/g, function($00) {\n          return {'>': '&gt;', '<': '&lt;'}[$00];\n        });\n      });\n    }\n\n    // attach plain variables to scope variables\n    function attachScope(v) {\n      //console.log(VarMap, [v]);\n      if (v) {\n        //var DEBUG = /error/.test(v);\n        //DEBUG && console.log(11, [v]);\n\n        //ToDo: still buggy, this need to improve\n        var vv = '';\n        var matches = v.match(varOrStringRegex);\n        //DEBUG && console.log(12, matches);\n        for(var i = 0; i < matches.length; i++) {\n\n          if (valid_chr.indexOf(matches[i].charAt(0)) >= 0 && !VarMap[matches[i]] &&\n            (!i || matches[i-1][matches[i-1].length-1] !== '.')) {\n            vv += 'S.' + matches[i];\n          } else {\n            if (matches[i].indexOf('$index') >= 0) {\n              //console.log([val], LevelMap[level]);\n              //for(var j = level; j >= 0; j--) {\n              //  if (LevelVarMap[j]) {\n                  vv += matches[i].replace($indexRegex, LevelVarMap[ngRepeatLevel]);\n                  //break;\n                //}\n              //}\n            } else {\n              vv += matches[i];\n            }\n          }\n        }\n        //DEBUG && console.log(55, vv);\n        return vv;\n      }\n      return v;\n    }\n\n    // escape single quotes with backslash\n    function escapeSingleQuote(str) {\n      var quotePos = str.indexOf(\"'\");\n      if (quotePos >= 0) {\n        var ret = '';\n        var prevQuotePos = 0;\n        do {\n          ret += str.substring(prevQuotePos, quotePos);\n          //escaped quote\n          if (str.charAt(quotePos - 1) !== '\\\\') {\n            ret += \"\\\\\";\n          }\n          prevQuotePos = quotePos;\n          quotePos = str.indexOf(\"'\", prevQuotePos + 1);\n        } while (quotePos > 0);\n        ret += str.substr(prevQuotePos);\n        return ret;\n      } else {\n        return str;\n      }\n    }\n\n    // interpolation\n    function interpolate(str) {\n      var pos = str.indexOf('{{');\n      if (pos >= 0) {\n        var prevPos = 0;\n        var ret = '';\n        var outsideStr, insideStr;\n        do {\n          outsideStr = str.substring(prevPos, pos);\n          ret += escapeSingleQuote(outsideStr);\n\n          //skip {{\n          prevPos = pos + 2;\n          pos = str.indexOf('}}', prevPos);\n\n          insideStr = str.substring(prevPos, pos);\n          ret += \"'+(\" + attachFilter(insideStr) + val_mod + \")+'\";\n\n          //skip }} for next\n          prevPos = pos + 2;\n          pos = str.indexOf('{{', prevPos);\n        } while (pos > 0);\n\n        //remaining text outside interpolation\n        ret += escapeSingleQuote(str.substr(prevPos));\n        return ret;\n      } else {\n        return escapeSingleQuote(str);\n      }\n    }\n\n    // attach $filters\n    function attachFilter($1) {\n      //console.log(333,$1);\n      var pos = $1.indexOf('|');\n      if (pos === -1) {\n        return attachScope($1);\n      } else {\n        //ToDo: check this line later\n        var v = splitFilters($1);\n        var val = attachScope(v[0]);\n        var prevColonPos = 0, colonPos;\n        var filter;\n\n        //parse each filters\n        for(var i = 1; i < v.length; i++) {\n          filter = v[i];\n\n          colonPos = filter.indexOf(':');\n          //filter with params\n          if (colonPos > 0) {\n            val = \"F('\" + filter.slice(prevColonPos, colonPos).trim() + \"')(\" + val;\n            prevColonPos = ++colonPos;\n            colonPos = filter.indexOf(':', prevColonPos);\n            while (colonPos > 0) {\n              val += ',' + attachScope(filter.slice(prevColonPos, colonPos));\n              prevColonPos = ++colonPos;\n              colonPos = filter.indexOf(':', prevColonPos);\n            }\n            val += ',' + attachScope(filter.substr(prevColonPos)) + ')';\n\n          //filter without params\n          } else {\n            val = \"F('\" + filter.trim() + \"')(\" + val + ')';\n          }\n\n        }\n        return val;\n      }\n    }\n\n    //parse the element\n    parseHTML(template, {\n      //open tag with attributes\n      openTag: function(tagName, attr, selfClosing) {\n        // debug && console.log('openTag', [tagName, attr]);\n        var interpolatedAttr = {}, customId, tagId, noValAttr = '';\n        var attrName, attrVal, attrSkip, oneTimeBinding;\n\n        //skip parsing ng-if, ng-repeat, ng-class with, dota\n        // but interpolation will still be evaluated (by-design)\n        // to avoid this behavior, use ng-bind instead of {{}}\n        //  and create new scope with scope=1 in dota-render, or $watchers will never destroy.\n        if (attr['dota-pass']) {\n          doTAPass = level; doTAContinue = 0;\n        //re-enable dota parsing\n        } else if (attr['dota-continue']) {\n          doTAContinue = level;\n        }\n\n        //unless dota-pass or with dota-continue\n        if (!doTAPass || doTAContinue) {\n          if (diffLevel && attr.skip) {\n            skipLevel = level;\n            attrSkip = attr.skip;\n            attr.skip = void 0;\n            FnText += indent(level, 1) + 'var O'+ level + '=N+' + attrSkip + '; \\n';\n          }\n\n          //ng-repeat to while/for loop\n          if (attr['ng-repeat']) {\n            //console.log(21,[x], [val]);\n            LevelMap[level] = LevelMap[level] ? LevelMap[level] + 1 : 1;\n            var idx = 'i' + level, l = 'l'+ level;\n            var NG_REPEAT = attr['ng-repeat'];\n            var inPos = NG_REPEAT.indexOf(' in ');\n            var repeatVar = NG_REPEAT.substr(0, inPos), repeatSrc = NG_REPEAT.substr(inPos + 4);\n            var commaPos = repeatVar.indexOf(',');\n            var pipePos = repeatSrc.indexOf('|'), repeatSrcNew;\n            var colonPos, x;\n\n            //store variable name to use for $index later\n            //this is ng-repeat specific, LevelMap[level] is same for ng-if too\n            LevelVarMap[level] = idx;\n            ngRepeatLevel = level;\n\n            if (pipePos > 0) {\n              repeatSrcNew = attachFilter(repeatSrc);\n            } else {\n              colonPos = repeatSrc.indexOf(':');\n              if (colonPos < 0) {\n                repeatSrcNew = attachScope(repeatSrc);\n              }\n            }\n\n            // Range: \"i in 1:10\" ==> (for i = 1; i < 10; i++)\n            if (colonPos > 0) {\n              var start = repeatSrc.substr(0, colonPos), end, step;\n              var anotherColon = repeatSrc.indexOf(':', ++colonPos);\n              if (anotherColon > 0) {\n                end = repeatSrc.substring(colonPos, anotherColon);\n                step = repeatSrc.substr(anotherColon + 1);\n              } else {\n                end = repeatSrc.substr(colonPos);\n                step = 1;\n              }\n              // console.log([start, end, step])\n\n              FnText += indent(level, 1) + 'for(var ' +\n                repeatVar + '=' + start + ';' +\n                repeatVar + (step > 0 ? '<' : '>') + end + ';' + repeatVar + '+=' + step + '){\\n';\n              VarMap[repeatVar] = 1;\n\n            // Object: \"k, v in {}\" ==> (for in {})\n            } else if (commaPos > 0) {\n              var key = repeatVar.substr(0, commaPos);\n              var value = repeatVar.substr(commaPos + 1);\n              FnText += indent(level, 1) + 'var ' +\n                value + ',D' + level + '=' + repeatSrcNew + ';\\n';\n              FnText += indent(level, 1) + 'for(var ' + key + ' in D' + level + '){\\n';\n              //                             space is needed for manual uglify  ->  vvv\n              FnText += indent(level) + value + ' = ' + 'D' + level + '[' + key + ']; \\n';\n              VarMap[key] = VarMap[value] = 1;\n\n            // Array: \"k in []\" ==> while loop\n            } else {\n              FnText += indent(level, 1) + 'var ' +\n                repeatVar + ',D' + level + '=' + repeatSrcNew + ','\n                + idx + '=-1,' + l + '=D' + level + '.length;\\n';\n              FnText += indent(level, 1) + 'while(++' + idx + '<' + l + '){\\n';\n              //                        space is needed for manual uglify  ->  vvv\n              FnText += indent(level) + repeatVar + '=D' + level + '[' + idx + ']; \\n';\n              VarMap[repeatVar] = 1;\n            }\n            //remote attribute not to get forwarded to angular\n            attr['ng-repeat'] = void 0;\n          }\n\n          //re-render sub template\n          if (attr.refresh) {\n            customId = 1;\n            oneTimeBinding = attr.refresh.indexOf('::');\n            FnText += indent(level, 2) +\n              (!Watched ? 'var ' + (watchDiff ? '': 'N=1,') + 'T=this;T.W=[];' : '') +\n              'var W={N:N,I:N+\"' + '.' + uniqueId + '\",W:\"' +\n              (oneTimeBinding >=0 ? attr.refresh.substr(oneTimeBinding + 2) + '\",O:1': attr.refresh + '\"') +\n              (attr.compile ? ',C:1' : '') +\n              '};T.W.push(W);\\n';\n            WatchMap[level] = Watched = 1;\n            FnText += indent(level, 2) + 'W.F=function(S,F,$attr,X,N){var R=\"\";\\n';\n            attr.refresh = void 0;\n          }\n\n          if (attr['ng-init']) {\n            FnText += indent(level) + attachScope(attr[\"ng-init\"]) + '; \\n';\n            attr['ng-init'] = void 0;\n          }\n\n          //ng-if to javascript if\n          if (attr['ng-if']) {\n            if (diffLevel) {\n              ngIfLevel = level;\n              ngIfLevels.push(level);\n              ngIfLevelMap[level] = 0;\n            }\n            LevelMap[level] = LevelMap[level] ? LevelMap[level] + 1 : 1;\n            FnText += indent(level, 1) + 'if('+ attachScope(attr['ng-if']) +'){\\n';\n            // console.log('ng-if starts here', level);\n            attr['ng-if'] = void 0;\n          }\n\n          if (attr['elif'] !== void 0) {\n            FnText += indent(level, 1) + 'else if('+ attachScope(attr['elif']) +'){\\n';\n            LevelMap[level] = LevelMap[level] ? LevelMap[level] + 1 : 1;\n            attr['elif'] = void 0;\n          }\n\n          if (attr['else'] !== void 0 && !watchDiff) {\n            FnText += indent(level, 1) + 'else{\\n';\n            LevelMap[level] = LevelMap[level] ? LevelMap[level] + 1 : 1;\n            attr['else'] = void 0;\n          }\n\n          if (attr['ng-class']) {\n            var ngScopedClass = attachScope(attr['ng-class']), match;\n            interpolatedAttr.class = (attr.class ? interpolate(attr.class) : '');\n            while((match = ngClassRegex.exec(ngScopedClass)) !== null) {\n              interpolatedAttr.class +=\n                (\"'+(\" + match[2] + '?' +\n                  \"'\" + (interpolatedAttr.class ? ' ' : '') + match[1].replace(/['\"]/g, '') +\n                  \"':'')+'\");\n            }\n            attr['ng-class'] = void 0;\n          }\n\n          if (attr['ng-show']) {\n            interpolatedAttr.class = (interpolatedAttr.class || attr.class || '');\n            interpolatedAttr.class += \"'+(\" + attachScope(attr['ng-show']) +\n              \"?'':'\" + (interpolatedAttr.class ? ' ' : '') + \"ng-hide')+'\";\n            attr['ng-show'] = void 0;\n          }\n\n          if (attr['ng-hide']) {\n            interpolatedAttr.class = (interpolatedAttr.class || attr.class || '');\n            interpolatedAttr.class += \"'+(\" + attachScope(attr['ng-hide']) +\n              \"?'\" + (interpolatedAttr.class ? ' ' : '') + \"ng-hide':'')+'\";\n            attr['ng-hide'] = void 0;\n          }\n\n          //remove +''+ from class, for unnecessary string concat\n          if (interpolatedAttr.class) {\n            interpolatedAttr.class = interpolatedAttr.class.replace(/\\+''\\+/g, '+');\n            attr.class = void 0;\n          } else if (attr.class) {\n            interpolatedAttr.class = interpolate(attr.class);\n            attr.class = void 0;\n          }\n\n          // expand interpolations on attributes, and some more\n          for (x in attr) {\n            attrVal = attr[x];\n            if (attrVal === void 0) { continue; }\n\n            // some ng- attributes\n            if (x.substr(0, 3) === 'ng-') {\n              //some ng-attr are just don't need it here.\n              attrName = x.substr(3);\n              //something like ng-src, ng-href, etc.\n              if (lazyNgAttrRegex.test(attrName)) {\n                x = attrName;\n\n              //convert ng-events to dota-events, to be bind later with native events\n              } else if (options.event && events.indexOf(' ' + attrName + ' ') >= 0) {\n                //adding attr \"de\" for querySelectorAll in ngDoTA\n                interpolatedAttr.class = interpolatedAttr.class ? 'de ' + interpolatedAttr.class : 'de';\n                // interpolatedAttr.de = 1;\n                x = 'de-' + attrName;\n\n              } else if (noValAttrRegex.test(attrName)) {\n                noValAttr += \"'+(\" + attachScope(attrVal) + \"?' \" + attrName + \"=\\\"\\\"':'')+'\";\n                //noValAttr will attach later\n                continue;\n\n              //ng-value\n              } else if (attrName === 'value') {\n                interpolatedAttr.value = \"'+(\" + attachScope(attrVal) + \")+'\";\n                continue;\n              }\n            }\n\n            //ng-repeat loop variables are not available!\n            // only way to acccess is to use $index like \"data[$index]\"\n            // instead of \"item\" as in \"item in data\"\n            if (attrVal.indexOf('$index') >= 0) {\n              //console.log([val], LevelMap[level]);\n              //for(var j = level; j >= 0; j--) {\n              //  if (LevelVarMap[j]) {\n                  interpolatedAttr[x] = interpolate(attrVal).replace($indexRegex, \"'+\" + LevelVarMap[ngRepeatLevel] + \"+'\");\n              //    break;\n              //  }\n              //}\n            } else {\n              interpolatedAttr[x] = interpolate(attrVal);\n            }\n          }\n\n        // pass all attributes to angular, except interpolation and $index\n        } else {\n          for (x in attr) {\n            //or just do use escapeSingleQuote\n\n            if (attr[x].indexOf('$index') >= 0) {\n              //console.log([val], LevelMap[level]);\n              //for(var j = level; j >= 0; j--) {\n              //  if (LevelVarMap[j]) {\n                  interpolatedAttr[x] = interpolate(attr[x]).replace($indexRegex, \"'+\" + LevelVarMap[ngRepeatLevel] + \"+'\");\n              //    break;\n              //  }\n              //}\n            } else {\n              interpolatedAttr[x] = interpolate(attr[x]);\n            }\n          }\n        }\n\n        //write tag back as string\n        FnText += indent(level) + \"R+='<\" + tagName;\n\n        //make id attr come before anything\n        if (customId || watchDiff) {\n          tagId = idHash[uniqueId + '.' + level] = interpolatedAttr.id || (\"'+N+++'.\" + uniqueId);\n          FnText += ' id=\"' + tagId + '\"';\n          if (interpolatedAttr.id) {\n            interpolatedAttr.id = void 0;\n          }\n        }\n\n        //write back attributes\n        for(var k in interpolatedAttr) {\n          FnText += \" \" + k + '=\"' + interpolatedAttr[k] + '\"';\n        }\n\n        //attach boolean attributes at last\n        FnText += noValAttr +  (selfClosing ? ' /' : '') + \">';\\n\";\n\n        if (watchDiff) {\n          // FnText += indent(level) + \"N++; \\n\";\n          if (ngIfLevelMap[ngIfLevel] >= 0) {\n            ngIfLevelMap[ngIfLevel]++;\n            // console.log('isPath ngIfCounter', [tagName, ngIfCounter]);\n          }\n        }\n\n        //expand doTA templates with expand=1 option\n        if (attr['dota-render'] && attr.expand) {\n          var attrArray = [];\n          //attach data-X attr, and scope-X attr\n          for(x in attr) {\n            if (!x.indexOf('data-')) {\n              attrArray.push('\"' + x.slice(5) + '\":\"' + attr[x] + '\"');\n            } else if (!x.indexOf('scope-')) {\n              attrArray.push('\"' + x.slice(6) + '\":S[\"' + attr[x] + '\"]');\n            }\n          }\n          FnText += indent(level) + 'var P={' + attrArray.join(',') + '},U=\"' + attr['dota-render'] + '\";\\n';\n          //only expand if renderFn is ready in cache, but not in cache-dom (which unneeded)\n          FnText += indent(level) + 'doTA.C[U]&&!doTA.D[U]&&(R+=doTA.C[U](S,F,P,X)); \\n';\n        }\n\n        level++;\n      },\n\n      //void tag no need to write closing tag\n      voidTag: function() {\n        level--;\n\n        if (diffLevel && level === ngIfLevel && ngIfLevelMap[ngIfLevel] >= 0) {\n          // console.log('ngIfLevelMap1', ngIfLevel, ngIfLevels, ngIfLevelMap);\n          if (ngIfLevelMap[ngIfLevel]) {\n            FnText += indent(level, 1) + \"}else{\" +\n              \"R+='<span id=\\\"'+N+'.\" + uniqueId + '\" hidden=\"\"></span>\\';' +\n              \"N+=\" + ngIfLevelMap[ngIfLevel] + \";}; \\n\";\n          }\n          //save counter\n          ngIfCounterTmp = ngIfLevelMap[ngIfLevel];\n          //clear counter\n          ngIfLevelMap[ngIfLevel] = void 0;\n          //remove last level\n          ngIfLevel = ngIfLevels[--ngIfLevels.length - 1];\n          //add up to previous level\n          if (ngIfLevel) {\n            ngIfLevelMap[ngIfLevel] += ngIfCounterTmp;\n          }\n          // console.log('ngIfLevelMap2', ngIfLevel, ngIfLevels, ngIfLevelMap);\n          if (LevelMap[level] > 0) {\n            LevelMap[level]--;\n          }\n        }\n\n        //close \"if\", \"for\", \"while\" blocks\n        //while is needed because loop and if can be in same tag\n        while (LevelMap[level] > 0) {\n          FnText += indent(level, 1) + '}\\n';\n          LevelMap[level]--;\n        }\n\n        //clear ng-repeat $index\n        if (ngRepeatLevel === level) {\n          LevelVarMap[level] = 0;\n          ngRepeatLevel = void 0;\n        }\n\n        //reset dota-pass when out of scope\n        if (doTAPass && doTAPass >= level) {\n          doTAPass = 0;\n        }\n      },\n\n      //close tag\n      closeTag: function(tagName) {\n        level--;\n\n        //just write closing tag back\n        FnText += indent(level) + \"R+='</\" + tagName + \">';\\n\";\n\n        //ngIfCounter for most possible uniqueId generation; don't work with loop inside!\n        if (diffLevel && level === ngIfLevel && ngIfLevelMap[ngIfLevel] >= 0) {\n          // console.log('ngIfLevelMap1', ngIfLevel, ngIfLevels, ngIfLevelMap);\n          if (ngIfLevelMap[ngIfLevel]) {\n            FnText += indent(level, 1) + \"}else{\" +\n              \"R+='<\" + tagName + \" id=\\\"'+N+'.\" + uniqueId + '\" hidden=\"\" ' +\n              (tagName === 'img' || tagName === 'input' || tagName === 'br' || tagName === 'hr' ?\n                '/>' : '></' + tagName + '>')\n              + '\\';' +\n              \"N+=\" + ngIfLevelMap[ngIfLevel] + \";}; \\n\";\n          }\n          //save counter\n          ngIfCounterTmp = ngIfLevelMap[ngIfLevel];\n          //clear counter\n          ngIfLevelMap[ngIfLevel] = void 0;\n          //remove last level\n          ngIfLevel = ngIfLevels[--ngIfLevels.length - 1];\n          //add up to previous level\n          if (ngIfLevel) {\n            ngIfLevelMap[ngIfLevel] += ngIfCounterTmp;\n          }\n          // console.log('ngIfLevelMap2', ngIfLevel, ngIfLevels, ngIfLevelMap);\n          if (LevelMap[level] > 0) {\n            LevelMap[level]--;\n          }\n        }\n\n        // console.log('LevelMap1', LevelMap);\n        //close \"if\", \"for\", \"while\" blocks\n        while (LevelMap[level] > 0) {\n          FnText += indent(level, 1) + '}\\n';\n          LevelMap[level]--;\n        }\n        // console.log('LevelMap2', LevelMap);\n\n        if (diffLevel) {\n          if (level === skipLevel) {\n            // console.log('ngIfLevel', [level, skipLevel, ngRepeatLevel])\n            FnText += indent(level, 1) + 'N=O' + level + '; \\n';\n          }\n          if (level === skipLevel) {\n            skipLevel = void 0;\n          }\n        }\n\n        //clear ng-repeat $index\n        if (ngRepeatLevel === level) {\n          LevelVarMap[level] = 0;\n          ngRepeatLevel = void 0;\n        }\n\n        //add blank node if $watch block return nothing, mostly occur with ng-if\n        if (WatchMap[level]) {\n          FnText += indent(level, 1) +\n            \"R=R||('<\" + tagName + ' id=\"' + idHash[uniqueId + '.' + level] +\n            '\" style=\"display:none\"></' + tagName + '>\\');\\n';\n          WatchMap[level] = 0;\n          FnText += indent(level, 2) + 'return R;}; \\n';\n          FnText += indent(level, 2) + 'R+=W.F(S,F,$attr,X,N); \\n';\n        }\n\n        //reset dota-pass when out of scope\n        if (doTAPass && doTAPass >= level) {\n          doTAPass = 0;\n        }\n      },\n\n      //text node\n      text: function(text) {\n        //console.log([text]);\n        FnText += indent(level) + ('R+=\\'' + interpolate(text) + '\\';\\n')\n          .replace(/\\+''|''\\+/g,'');\n      },\n\n      //comment node\n      comment: function(data) {\n        if (options.comment !== 0) {\n          //console.log(111,[data]);\n          FnText += indent(level) + \"R+='<\" + escapeSingleQuote(data) + \">';\\n\";\n        }\n      }\n    });\n\n    if (watchDiff) {\n      FnText += indent(0) + 'if(X&&J in doTA.H){doTA.diff' + (diffLevel || '') + '(J,R)}' +\n        'doTA.H[J]=R;\\n';\n    }\n\n    FnText += indent(0) +'return R;\\n';\n\n    //Default Optimization\n    // - concat possible lines for performance\n    FnText = FnText.replace(/;R\\+=/g,'+').replace(/'\\+'/g,'');\n\n    //extra optimization, which might take some more CPU\n    if (options.optimize && !watchDiff) {\n      FnText = FnText.replace(removeUnneededQuotesRegex,'$1$2');\n    }\n\n    //print the whole function if debug\n    if (options.debug) {\n      /**/console.log(FnText);\n    }\n    // console.log(FnText);\n\n    try {\n      //$scope, $filter\n      compiledFn = new Function('S', 'F', '$attr', 'X', FnText);\n      if (Watched) {\n        compiledFn = {W:[], F: compiledFn};\n      }\n    } catch (err) {\n      if (typeof console !== \"undefined\") {\n        /**/console.log(\"doTA compile error:\\n\" + FnText);\n      }\n      throw err;\n    }\n\n    // just for less array usage on heap profiling\n    // but this may trigger GC more\n    FnText = LevelMap = LevelVarMap = VarMap = ngIfLevels = ngIfLevelMap = WatchMap = idHash = void 0;\n    return compiledFn;\n  }\n\n  var compiledHash = {};\n  var lastId = 0;\n\n  function initCompileHash(obj) {\n    for (var x in obj) {\n      compiledHash[x] = obj[x];\n      if (obj[x] > lastId) {\n        lastId = obj[x];\n      }\n    }\n  }\n\n  function getUniqueId(key) {\n    if (key) {\n      if (compiledHash[key]) {\n        return compiledHash[key];\n      } else {\n        compiledHash[key] = lastId;\n        return lastId++;\n      }\n    } else {\n      return lastId++;\n    }\n  }\n\n  var doTAObj = {\n    diff: diffPatchExact,\n    diff2: diffPatchChildren,\n    getId: getUniqueId,\n    initCH: initCompileHash,\n    compile: compileHTML,\n    C: {}, //Cached compiled functions\n    D: {}, //Cached DOM to be used by ngDoTA, needed here to prevent unneccessary rendering\n    H: {} //HashMap for TextDiff\n  };\n\n  //warmup most used functions\n  doTAObj.compile('<div class=\"x {{x}}\" ng-class=\"{x:1}\" ng-repeat=\"x in y\" ng-if=\"x\">x{{x}}</div><!--x-->', {\n    watchDiff: 1, diffLevel: 2});\n\n  return doTAObj;\n})();\n\nif (typeof module !== \"undefined\" && module.exports) {\n  module.exports = doTA;\n//IE8\n} else if (typeof console === \"undefined\") {\n  var noop = function() {};\n  console = {log: noop, time: noop, timeEnd: noop};\n}\n"],"sourceRoot":"/source/"}