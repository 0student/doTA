{"version":3,"sources":["doTA.js"],"names":["doTA","S","k","l","b","forEach","d","a","length","call","T","indexOf","charAt","closeTag","substring","comment","g","e","r","m","q","x","c","slice","replace","toLowerCase","openTag","voidTag","text","H","console","error","document","getElementById","U","className","split","style","substr","trim","setAttribute","documentMode","String","prototype","this","Object","watch","unwatch","V","W","X","Y","Z","aa","ba","Q","ca","D","A","R","diff","firstChild","nodeType","nodeValue","diff2","createElement","lastIndexOf","innerHTML","parentNode","replaceChild","insertBefore","createTextNode","appendChild","getId","initCH","compile","h","match","B","C","push","f","t","N","E","O","F","loose","watchDiff","diffLevel","$index","undefined","$attr","Math","Date","Array","Infinity","NaN","var","in","true","false","null","void","I","y","u","M","G","dotaRender","P","strip","encode",">","<","p","w","n","skip","J","K","v","L","z","refresh","elif","exec","model","bind","value","test","event","id","expand","join","optimize","debug","log","Function","module","exports","noop","time","timeEnd"],"mappings":"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","file":"doTA.min.js","sourcesContent":["var doTA = (function() {'use strict';\n  var msie = typeof document !== 'undefined' && document.documentMode;\n\n  /* for ie8 */\n  if (!String.prototype.trim) {\n    String.prototype.trim = function() {\n      return this.replace(/^\\s+|\\s+$/g,'');\n    };\n  }\n\n  /* no, thanks! firefox */\n  if (Object.prototype.watch) {\n    delete Object.prototype.watch;\n    delete Object.prototype.unwatch;\n  }\n\n  // pretty indent for debugging\n  function indent(n, x) {\n    var ret = new Array(n + 2).join('    ');\n    return x ? ret.slice(0, -2 * x) : ret;\n  }\n\n  function forEachArray(src, iter, ctx) {\n    if (!src) { return; }\n    if (src.forEach) {\n      return src.forEach(iter);\n    }\n    for (var key = 0, length = src.length; key < length; key++) {\n      iter.call(ctx, src[key], key);\n    }\n  }\n\n  // decode html entities\n  function decodeEntities(text) {\n    return text.indexOf('&') < 0 ? text : text\n      .replace(/&gt;/g, '>').replace(/&lt;/g, '<')\n      .replace(/&amp;/g, '&').replace(/&quot;/g, '\"');\n  }\n\n  // parse attributes from html open tag and make dict object\n  function parseAttr(chunk, func) {\n    var attr = {}, tagName;\n    var pos = chunk.indexOf(' ');\n    var spPos;\n    var len, attrName, attrVal;\n    var valStart, valEndPos;\n\n    if (pos !== -1) {\n      tagName = chunk.slice(0, pos);\n      len = chunk.length;\n\n      //console.log(222, [pos, chunk]);\n      while (++pos < len) {\n        var eqPos = chunk.indexOf('=', pos);\n\n        // ** attribute without value (last attribute) **\n        if (eqPos === -1) {\n          attrName = chunk.slice(pos);\n          // console.log('eqPos === -1', [attrName, pos, chunk])\n          if (attrName !== '/') {\n            attr[attrName] = '';\n          }\n          //attr required will be required=\"\", while is valid syntax\n          //http://www.w3.org/TR/html-markup/syntax.html#syntax-attr-empty\n          break;\n        }\n\n        // no val attr in middle\n        spPos = chunk.indexOf(' ', pos);\n        if (spPos > 0 && spPos < eqPos) {\n          attr[chunk.slice(pos, spPos)] = \"\";\n          pos = spPos;\n          continue;\n        }\n\n        //console.log(33, [eqPos]);\n        attrName = chunk.slice(pos, eqPos);\n        //console.log(331, [attrName]);\n\n        valStart = chunk[eqPos + 1];\n        //console.log(332, [valStart]);\n\n        //if attribute value is start with quote\n        if (valStart === '\"' || valStart === \"'\") {\n          valEndPos = chunk.indexOf(valStart, eqPos + 2);\n          if (valEndPos < 0) { throw 'ERR:Invalid HTML: [' + chunk + ']'; }\n\n          attrVal =  chunk.slice(eqPos + 2, valEndPos);\n          attr[attrName] =0>attrVal.indexOf(\"&\")?attrVal:attrVal.replace(/&gt;/g,\">\").replace(/&lt;/g,\"<\").replace(/&amp;/g,\"&\").replace(/&quot;/g,'\"'); //INLINE;\n          pos = valEndPos + 1;\n          //console.log(311, [valEndPos, attrName, attrVal]);\n        } else {\n\n          valEndPos = chunk.indexOf(' ', eqPos + 2);\n\n          //when no more attributes\n          if (valEndPos < 0) {\n            attrVal =  chunk.slice(eqPos + 1);\n            attr[attrName] =0>attrVal.indexOf(\"&\")?attrVal:attrVal.replace(/&gt;/g,\">\").replace(/&lt;/g,\"<\").replace(/&amp;/g,\"&\").replace(/&quot;/g,'\"'); //INLINE;\n            //console.log(442, [attrVal]);\n            break;\n\n          } else {\n            attrVal =  chunk.slice(eqPos + 1, valEndPos);\n            attr[attrName] =0>attrVal.indexOf(\"&\")?attrVal:attrVal.replace(/&gt;/g,\">\").replace(/&lt;/g,\"<\").replace(/&amp;/g,\"&\").replace(/&quot;/g,'\"'); //INLINE;\n            //console.log(313, [eqPos, valEndPos, attrVal]);\n            pos = valEndPos;\n          }\n        }\n      }\n\n      tagName = tagName.toLowerCase();\n      if (tagName === 'input' || tagName === 'img') {\n        //http://www.w3.org/TR/html-markup/syntax.html\n        //area, base, br, col, command, embed, hr, img, input, keygen, link, meta, param, source, track, wbr\n        func.openTag(tagName, attr, 1);\n        func.voidTag();\n      } else if (attrName === '/') {\n        func.openTag(tagName, attr);\n        func.closeTag(tagName);\n      } else {\n        func.openTag(tagName, attr);\n      }\n\n    // no attributes\n    } else {\n\n      // self closing, explicit\n      if (chunk.charAt(chunk.length - 1) === '/') {\n        tagName = chunk.slice(0, -1).toLowerCase();\n\n        if (tagName === 'br' || tagName === 'hr') {\n          func.openTag(tagName, attr, 1);\n          func.voidTag();\n        } else {\n          func.openTag(tagName, attr);\n          func.closeTag(tagName);\n        }\n      } else {\n        tagName = chunk.toLowerCase();\n\n        // self closing, implicit\n        if (tagName === 'br' || tagName === 'hr') {\n          func.openTag(tagName, attr, 1);\n          func.voidTag();\n        } else {\n          func.openTag(tagName, attr);\n        }\n      }\n    }\n\n  }\n\n  var events = ' scroll change click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste ';\n  var valid_chr = '_$abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n  // minimal stripped down html parser\n  function parseHTML(html, func) {\n    if (!html) { return; }\n    var prevPos = 0, pos = html.indexOf('<');\n    do {\n      if (html.charAt(pos) === '<') {\n        pos++;\n        if (html.charAt(pos) === '/') {\n          prevPos = ++pos;\n          pos = html.indexOf('>', prevPos);\n          //close tag must be like </div>, but not <div />\n          // console.log(['closetag', prevPos, pos, html.substring(prevPos, pos)])\n          func.closeTag(html.substring(prevPos, pos));\n        } else if (html.charAt(pos) === '!') {\n          prevPos = pos;\n          pos = html.indexOf('>', prevPos);\n          // console.log(['comment', prevPos, pos, html.substring(prevPos, pos)])\n          func.comment(html.substring(prevPos, pos));\n        } else {\n          prevPos = pos;\n          pos = html.indexOf('>', prevPos);\n          // console.log(['opentag', prevPos, pos, html.substring(prevPos, pos), parseAttr(html.substring(prevPos, pos))])\n          // func.openTag.apply(this, parseAttr(html.substring(prevPos, pos)));\n          parseAttr(html.substring(prevPos, pos), func);\n        }\n      } else if (html.charAt(pos) === '>') { //&& html.charAt(pos + 1) !== '<'\n        prevPos = ++pos;\n        pos = html.indexOf('<', prevPos);\n        if (pos > prevPos) {\n          // console.log(['text', prevPos, pos, html.substring(prevPos, pos)])\n          func.text(html.substring(prevPos, pos));\n        }\n      } else {\n        console.error('Parse ERR?', [prevPos, pos, html.substring(prevPos, pos), html.slice(pos)]);\n        break;\n      }\n\n    } while (pos > 0);\n  }\n\n  //diff and patch dom with exact same structure\n  function diffPatchExact(prevKey, html2) {\n    var html1 = doTA.H[prevKey];\n    var prevPos1 = 0, pos1 = html1.indexOf('<');\n    var prevPos2 = 0, pos2 = html2.indexOf('<');\n    var tagId = '', elem, part1, part2;\n    var posx, endPosx;\n\n    do {\n      if (html1.charAt(pos1) === \"<\") {\n        pos1++;\n        pos2++;\n        if (html1.charAt(pos1) === \"/\" || html1.charAt(pos1) === \"!\") {\n          //don't patch comment node and close tag.\n          pos1 = html1.indexOf('>', pos1);\n          pos2 = html2.indexOf('>', pos2);\n        } else {\n          prevPos1 = pos1;\n          prevPos2 = pos2;\n          pos1 = html1.indexOf('>', prevPos1);\n          pos2 = html2.indexOf('>', prevPos2);\n          part1 = html1.substring(prevPos1, pos1);\n          part2 = html2.substring(prevPos2, pos2);\n          //attributes\n          if (part1 !== part2) {\n            // console.log('openTag', [part1, part2])\n            tagId = parsePatchAttr(part1, part2);\n          } else {\n            //record id\n            //tagId = getTagId(part1);\n            posx = part1.indexOf(' id=\"');\n            0 <= posx && (posx += 5, endPosx = part1.indexOf('\"', posx), tagId = part1.substring(posx, endPosx));\n          }\n        }\n\n      //text node\n      } else if (html1.charAt(pos1) === '>') {\n        prevPos1 = ++pos1;\n        prevPos2 = ++pos2;\n\n        pos1 = html1.indexOf('<', prevPos1);\n        pos2 = html2.indexOf('<', prevPos2);\n        //textNode, only support firstChild here\n        if (pos2 > prevPos2) {\n          var text1 = html1.substring(prevPos1, pos1);\n          var text2 = html2.substring(prevPos2, pos2);\n          if (text1 !== text2) {\n            elem = document.getElementById(tagId);\n            if (elem) {\n              if (elem.firstChild && elem.firstChild.nodeType === 3) {\n                // console.log('textApplied', [text1, text2]);\n                elem.firstChild.nodeValue = text2;\n              } //else to log something?\n            } else {\n              console.log('tag not found', [tagId]);\n            }\n          }\n        }\n\n      }\n\n    } while(pos1 > 0);\n  }\n\n  // find position of outerHTML end\n  // this function will be inline during building\n  function getOuterHTMLEnd(HTML, START_POS) {\n    var LVL = 1, POS = START_POS;\n    for(;;) {\n      POS = HTML.indexOf('>', POS);\n      if (HTML.charAt(POS - 1) === '/') { //self closing\n        LVL--;\n        if (LVL <= 0) break;\n      }\n      POS = HTML.indexOf('<', POS);\n      if (HTML.charAt(POS + 1) === '/') {\n        LVL--;\n        if (LVL <= 0) {\n          POS = HTML.indexOf('>', POS + 2);\n          break;\n        }\n      } else if (HTML.charAt(POS + 1) !== '!') {\n        LVL++;\n      }\n      // console.log('LVL', LVL);\n    }\n\n    // console.log('getOutHTML', tagName, [tagName, pos2, pos2, ])\n    return ++POS;\n  }\n\n  // FlatDOM: diff html as text and patch dom nodes\n  function diffPatchChildren(prevKey, html2) {\n    var html1 = doTA.H[prevKey];\n    var prevPos1 = 0, pos1 = html1.indexOf('<');\n    var prevPos2 = 0, pos2 = html2.indexOf('<');\n    var tagId1, tagId2, elem1, part1, part2;\n    // var tagNo1 = 0, tagNo2 = 0;\n    var newNode = document.createElement('div');\n    var tagStartPos1, tagStartPos2;\n    var LVL; //this is needed for fnInline\n    // console.log(html1);\n    // console.log(html2);\n\n    for (;;) {\n      // console.log('before', [dirty1, dirty2], [tagId1, tagId2], [html1.substr(pos1, 20), html2.substr(pos2, 20)]);\n\n      if (pos1 >= 0) {\n        pos1 = html1.indexOf(' id=\"', pos1);\n        if (pos1 > 0) {\n          prevPos1 = pos1 + 5;\n          pos1 = html1.indexOf('\"', prevPos1);\n          tagId1 = html1.substring(prevPos1, pos1);\n          // tagNo1 = tagId1^0;\n        }\n      }\n\n      // console.log('middle', [tagId1, tagId2], [html1.substr(pos1, 20), html2.substr(pos2, 20)]);\n\n      if (pos2 >= 0) {\n        pos2 = html2.indexOf(' id=\"', pos2);\n        if (pos2 > 0) {\n          prevPos2 = pos2 + 5;\n          pos2 = html2.indexOf('\"', prevPos2);\n          tagId2 = html2.substring(prevPos2, pos2);\n          // tagNo2 = tagId2^0;\n        }\n      }\n\n      // console.log('after', [dirty1, dirty2], [tagId1, tagId2],\n      //   [pos1, pos2], [html1.substr(pos1, 20), html2.substr(pos2, 20)]);\n\n      //exist inifite loop\n      if (pos1 < 0 || pos2 < 0) break;\n\n      //same node\n      if (tagId1 === tagId2) {\n        tagStartPos1 = ++pos1;\n        pos1 = html1.indexOf('>', pos1);\n        part1 = html1.substring(tagStartPos1, pos1);\n\n        tagStartPos2 = ++pos2;\n        pos2 = html2.indexOf('>', pos2);\n        part2 = html2.substring(tagStartPos2, pos2);\n\n        // console.log('same node', [part1, part2]);\n\n        //attr really different\n        if (part1 !== part2) {\n          elem1 = document.getElementById(tagId1);\n          if (elem1) {\n            //nodes to be inserted or deleted\n            if ((part1.substr(1, 6) === 'hidden') !== (part2.substr(1, 6) === 'hidden')) {\n              tagStartPos2 = html2.lastIndexOf('<', pos2 - 6);\n              LVL=1,pos2=tagStartPos2;for(;;){pos2=html2.indexOf(\">\",pos2);if(\"/\"===html2.charAt(pos2-1)&&(LVL--,0>=LVL))break;pos2=html2.indexOf(\"<\",pos2);if(\"/\"===html2.charAt(pos2+1)){if(LVL--,0>=LVL){pos2=html2.indexOf(\">\",pos2+2);break}}else\"!\"!==html2.charAt(pos2+1)&&LVL++} //INLINE\n              newNode.innerHTML = html2.substring(tagStartPos2, pos2);\n\n              // tagStartPos1 = html1.lastIndexOf('<', pos1 - 6);\n              // console.warn('replaceChild', [tagId2, tagId1], [\n              //   html2.substring(tagStartPos2, getOuterHTMLEnd(html2, tagStartPos2)),\n              //   html1.substring(tagStartPos1, getOuterHTMLEnd(html1, pos1))]);\n\n              elem1.parentNode.replaceChild(newNode.firstChild, elem1);\n\n              LVL=1,pos1=pos1;for(;;){pos1=html1.indexOf(\">\",pos1);if(\"/\"===html1.charAt(pos1-1)&&(LVL--,0>=LVL))break;pos1=html1.indexOf(\"<\",pos1);if(\"/\"===html1.charAt(pos1+1)){if(LVL--,0>=LVL){pos1=html1.indexOf(\">\",pos1+2);break}}else\"!\"!==html1.charAt(pos1+1)&&LVL++} //INLINE\n\n            //only attribute changes\n            } else {\n              parsePatchAttr(part1, part2, elem1);\n              // console.warn('patch node', [tagId1, tagId2], [pos1, pos2], [tagStartPos1, tagStartPos2], [part1, part2])\n            }\n          } else {\n            console.error('elem not found', [tagId1, tagId2], [part1, part2]);\n            return;\n          }\n        } else {\n          //clear node for textNode\n          elem1 = void 0;\n        }\n\n        //if blank text node, skip early\n        if (html1.charAt(pos1 + 1) === '<' && html2.charAt(pos2 + 1) === '<') {\n          pos1++, pos2++;\n          continue;\n        }\n\n        prevPos1 = pos1;\n        pos1 = html1.indexOf('<', prevPos1);\n        part1 = html1.substring(prevPos1 + 1, pos1);\n        prevPos2 = pos2;\n        pos2 = html2.indexOf('<', prevPos2);\n        part2 = html2.substring(prevPos2 + 1, pos2);\n\n        //for text node really diff\n        if (part1 !== part2) {\n          // console.log('text diff', [tagId1, tagId2], [part1, part2]);\n          if (!elem1) {\n            elem1 = document.getElementById(tagId1);\n            if (!elem1) {\n              console.error('node not found', [tagId1, tagId2], [part1, part2], [html1.substr(pos1, 15), html2.substr(pos2, 15)], [html1, html2]);\n              return;\n            }\n          }\n          // console.log('part1,2', [part1, part2]);\n          if (elem1.firstChild) {\n            //overwrite textNode value\n            if (elem1.firstChild.nodeType === 3) {\n              elem1.firstChild.nodeValue = part2;\n              // console.warn('textNode overwritten', elem1, elem1.firstChild)\n\n            //not textNode, so, insertBefore\n            } else {\n              elem1.insertBefore(document.createTextNode(part2), elem1.firstChild);\n              // console.warn('textNode inserted', elem1, elem1.firstChild)\n            }\n\n          //no childNodes, so append one\n          } else {\n            elem1.appendChild(document.createTextNode(part2));\n          }\n        }\n      } else {\n        console.error(\"different Id - not supported for now!\", [tagId1, tagId2]);\n        return;\n      }\n\n    } //infinite loop\n\n  }\n\n  // parse attributes from html open tag and patch DOM when different\n  function parsePatchAttr(chunkA, chunkB, elem) {\n    var tagId;\n    var posA1, posA2, posB1, posB2;\n    var posDiff = 0;\n    var attrName, attrVal1, attrVal2;\n    // var len1 = chunk1.length;\n    // console.log('chunks', [chunkA, chunkB]);\n\n    //extract id to tag, if no elem specified\n    if (!elem) {\n      posA1 = chunkA.indexOf(' id=\"', posA1);\n      if (posA1 >= 0) {\n        posA1 += 5;\n        posA2 = chunkA.indexOf('\"', posA1);\n        tagId = chunkA.slice(posA1, posA2);\n        elem = document.getElementById(tagId);\n        if (!elem) {\n          throw console.error('tag not found', [posA1, posA2, tagId, elem, chunkA, chunkB]);\n        }\n        posA2 += 2;\n      } else {\n        throw console.error('id not found', [posA1, posA1, chunkA, chunkB]);\n      }\n    } else {\n      //first char is always space\n      posA2 = posB2 = 1;\n    }\n\n    for(;;) {\n      //attr name\n      posA1 = chunkA.indexOf('=\"', posA2);\n      if (posA1 < 0) break;\n      attrName = chunkA.slice(posA2, posA1);\n\n      //attr values\n      posA2 = chunkA.indexOf('\"', posA1 + 2);\n      attrVal1 =  chunkA.slice(posA1 + 2, posA2);\n\n      posB1 = posA1 + posDiff;\n      posB2 = chunkB.indexOf('\"', posB1 + 2);\n      attrVal2 =  chunkB.slice(posB1 + 2, posB2);\n\n      if (attrVal1 !== attrVal2) {\n        // console.log('setAttribute', [attrName, attrVal1, attrVal2], [chunk1, chunk2])\n        if (attrName === 'value') {\n          elem[attrName] = attrVal2;\n        } else {\n          if (msie) {\n            if (attrName === 'class') {\n              elem.className = attrVal2;\n            } else if (attrName === 'style') {\n              forEachArray(attrVal2.split(';'), function(item){\n                var colonPos = item.indexOf(':');\n                // console.log('style', [item.substr(0, colonPos).trim(), item.slice(colonPos+1).trim()])\n                elem.style[item.substr(0, colonPos).trim()] = item.slice(colonPos+1).trim();\n              })\n            } else {\n              elem.setAttribute(attrName, attrVal2);\n            }\n          } else {\n            elem.setAttribute(attrName, attrVal2);\n          }\n        }\n        posDiff = posB2 - posA2;\n      }\n\n      posA2 += 2;\n    }\n\n    return tagId;\n  }\n\n  // extract value of id from part of html open tag\n  // only id=\"xxx\" supported, this is internal use, so it's always double-quotes\n  // this function is inlined during building\n  function getTagId(partial, start) {\n    var pos = partial.indexOf(' id=\"', start), endPos;\n    if (pos >= 0) {\n      pos += 5;\n      endPos = partial.indexOf('\"', pos);\n      return partial.substring(pos, endPos);\n    }\n  }\n\n  // split filters into array, take care of | and || as different\n  function splitFilters(input, pos) {\n    var prevPos = 0;\n    var ret = [];\n    while (pos !== -1) {\n      if (input.charAt(pos + 1) === '|') {\n        pos += 2;\n      } else {\n        ret.push(input.substring(prevPos, pos));\n        prevPos = ++pos;\n      }\n      pos = input.indexOf('|', pos);\n    }\n    if (prevPos < input.length) {\n      ret.push(input.substr(prevPos));\n    }\n    return ret;\n  }\n\n  // ToDo: check compile performance with regex\n  var ngClassRegex = /('[^']+'|\"[^\"]+\"|[\\w$]+)\\s*:\\s*((?:[$.\\w]+|\\([^)]+\\)|[^},])+)/g;\n  var varOrStringRegex = /'[^']*'|\"[^\"]*\"|[\\w$]+|[^\\w$'\"]+/g;\n  var quotedStringRegex = /\"[^\"]*\"|'[^']*'/g;\n  var whiteSpaceRegex = /\\s{2,}|\\n/g;\n  var removeUnneededQuotesRegex = /\\b([\\w_-]+=)\"([^\"'\\s]+)\"(?=[\\s>])/g;\n  var lazyNgAttrRegex = /^(?:src|alt|title|href)/;\n  // https://github.com/kangax/html-minifier/issues/63\n  var noValAttrRegex = /^(?:checked|selected|disabled|readonly|multiple|required|hidden|nowrap)/;\n  var $indexRegex = /\\$index/g;\n  var $parent$indexRegex = /(?:\\$parent\\.)+\\$index/g;\n\n  // exported as doTA.compile\n  function compileHTML(template, options) {\n    options = options || {};\n    var val_mod = options.loose ? \"||''\" : '';\n    var watchDiff = options.watchDiff;\n    var diffLevel = +options.diffLevel;\n    var VarMap = {$index: 1, undefined: 1, $attr: 1,\n      Math: 1, Date: 1, String: 1, Object: 1, Array: 1, Infinity: 1, NaN: 1,\n      // alert: 1, confirm: 1, prompt: 1,\n      var: 1, in: 1,\n      true: 1, false: 1, null: 1, void: 1};\n    var level = 0, ngRepeatLevel;\n    var ngIfLevel, skipLevel, ngIfCounterTmp, ngIfLevels = [], ngIfLevelMap = {};\n    var LevelMap = {}, LevelVarMap = {};\n    var WatchMap = {}, Watched;\n    var doTAPass, doTAContinue;\n    var compiledFn;\n    var uniqueId = this.getId(options.dotaRender);\n    var idHash = {};\n\n    var FnText = indent(level) + \"'use strict';var \" +\n      (watchDiff ? 'N=1,J=' + uniqueId + ',' : '') +\n      \"R='';\\n\"; //ToDO: check performance on var declaration\n\n    //clean up extra white spaces and line break\n    template = template.replace(whiteSpaceRegex, ' ');\n\n    if (options.strip) {\n      template = template.replace(/>\\s+/g, '>').replace(/\\s+</g, '<');\n    }\n\n    // when encode is set, find strings and encode < and >, or parser will throw error.\n    if (options.encode) {\n      template = template.replace(quotedStringRegex, function($0) {\n        return $0.replace(/[<>]/g, function($00) {\n          return {'>': '&gt;', '<': '&lt;'}[$00];\n        });\n      });\n    }\n\n    // attach plain variables to scope variables\n    function attachScope(v) {\n      //console.log(VarMap, [v]);\n      if (v) {\n        //var DEBUG = /error/.test(v);\n        //DEBUG && console.log(11, [v]);\n\n        //ToDo: still buggy, this need to improve\n        var vv = '';\n        var matches = v.match(varOrStringRegex);\n        //DEBUG && console.log(12, matches);\n        for(var i = 0; i < matches.length; i++) {\n\n          if (valid_chr.indexOf(matches[i].charAt(0)) >= 0 && !VarMap[matches[i]] &&\n            (!i || matches[i-1][matches[i-1].length-1] !== '.')) {\n            vv += 'S.' + matches[i];\n          } else {\n            if (matches[i].indexOf('$index') >= 0) {\n              //only support last level for now\n              vv += matches[i].replace($indexRegex, LevelVarMap[ngRepeatLevel]);\n            } else {\n              vv += matches[i];\n            }\n          }\n        }\n        //DEBUG && console.log(55, vv);\n        return vv;\n      }\n      return v;\n    }\n\n    // escape single quotes with backslash\n    function escapeSingleQuote(str) {\n      var quotePos = str.indexOf(\"'\");\n      if (quotePos >= 0) {\n        var ret = '';\n        var prevQuotePos = 0;\n        do {\n          ret += str.substring(prevQuotePos, quotePos);\n          //escaped quote\n          if (str.charAt(quotePos - 1) !== '\\\\') {\n            ret += \"\\\\\";\n          }\n          prevQuotePos = quotePos;\n          quotePos = str.indexOf(\"'\", prevQuotePos + 1);\n        } while (quotePos > 0);\n        ret += str.substr(prevQuotePos);\n        return ret;\n      } else {\n        return str;\n      }\n    }\n\n    // interpolation\n    function interpolate(str) {\n      var pos = str.indexOf('{{');\n      if (pos >= 0) {\n        var prevPos = 0;\n        var ret = '';\n        var outsideStr, insideStr;\n        do {\n          outsideStr = str.substring(prevPos, pos);\n          ret += escapeSingleQuote(outsideStr);\n\n          //skip {{\n          prevPos = pos + 2;\n          pos = str.indexOf('}}', prevPos);\n\n          insideStr = str.substring(prevPos, pos);\n          ret += \"'+(\" + attachFilter(insideStr) + val_mod + \")+'\";\n\n          //skip }} for next\n          prevPos = pos + 2;\n          pos = str.indexOf('{{', prevPos);\n        } while (pos > 0);\n\n        //remaining text outside interpolation\n        ret += escapeSingleQuote(str.substr(prevPos));\n        return ret;\n      } else {\n        return escapeSingleQuote(str);\n      }\n    }\n\n    // attach $filters\n    function attachFilter($1) {\n      //console.log(333,$1);\n      var pos = $1.indexOf('|');\n      if (pos === -1) {\n        return attachScope($1);\n      } else {\n        //ToDo: check this line later\n        var v = splitFilters($1, pos);\n        var val = attachScope(v[0]);\n        var prevColonPos, colonPos;\n        var filter;\n\n        //parse each filters\n        for(var i = 1; i < v.length; i++) {\n          filter = v[i], prevColonPos = 0;\n\n          colonPos = filter.indexOf(':');\n          //filter with params\n          if (colonPos > 0) {\n            val = \"F('\" + filter.slice(prevColonPos, colonPos).trim() + \"')(\" + val;\n            prevColonPos = ++colonPos;\n            colonPos = filter.indexOf(':', prevColonPos);\n            while (colonPos > 0) {\n              val += ',' + attachScope(filter.slice(prevColonPos, colonPos));\n              prevColonPos = ++colonPos;\n              colonPos = filter.indexOf(':', prevColonPos);\n            }\n            val += ',' + attachScope(filter.substr(prevColonPos)) + ')';\n\n          //filter without params\n          } else {\n            val = \"F('\" + filter.trim() + \"')(\" + val + ')';\n          }\n\n        }\n        return val;\n      }\n    }\n\n    function apply$index(attrVal) {\n      var count, tmpRepeatLevel;\n\n      if (attrVal.indexOf('$parent.$index') >= 0) {\n        tmpRepeatLevel = ngRepeatLevel;\n        attrVal = attrVal.replace($parent$indexRegex, function($0) {\n          count = $0.match(/\\$parent/g).length; //may need to rewrite with indexOf\n          while (count>0) {\n            while (tmpRepeatLevel >= 0 && typeof LevelVarMap[--tmpRepeatLevel] === 'undefined') {}\n            --count;\n          }\n          return \"'+\" + LevelVarMap[tmpRepeatLevel] + \"+'\";\n        });\n      }\n      if (attrVal.indexOf('$index') >= 0) {\n        return attrVal.replace($indexRegex, \"'+\" + LevelVarMap[ngRepeatLevel] + \"+'\");\n      }\n      return attrVal;\n    }\n\n    //parse the element\n    parseHTML(template, {\n      //open tag with attributes\n      openTag: function(tagName, attr, selfClosing) {\n        // debug && console.log('openTag', [tagName, attr]);\n        var parsedAttr = {}, customId, tagId, noValAttr = '';\n        var attrName, attrVal, attrSkip, oneTimeBinding, doTAPassThis;\n\n        //skip parsing if dota-pass is specified (interpolation will still be expanded)\n        // https://jsperf.com/hasownproperty-vs-in-vs-undefined/12\n        if (typeof attr['dota-pass'] !== 'undefined') {\n          if (attr['dota-pass'] === 'this') {\n            doTAPass = doTAPassThis = 1;\n          } else {\n            doTAPass = level; doTAContinue = 0;\n          }\n        //re-enable dota parsing\n        } else if (typeof attr['dota-continue'] !== 'undefined') {\n          doTAContinue = level;\n        }\n\n        //unless dota-pass or with dota-continue\n        if (doTAPass === void 0 || doTAContinue) {\n          if (diffLevel && attr.skip) {\n            skipLevel = level;\n            attrSkip = attr.skip;\n            attr.skip = void 0;\n            FnText += indent(level, 1) + 'var O'+ level + '=N+' + attrSkip + '; \\n';\n          }\n\n          //ng-repeat to while/for loop\n          if (attr['ng-repeat']) {\n            //console.log(21,[x], [val]);\n            LevelMap[level] = LevelMap[level] ? LevelMap[level] + 1 : 1;\n            var idx = 'i' + level, l = 'l'+ level;\n            var NG_REPEAT = attr['ng-repeat'];\n            var inPos = NG_REPEAT.indexOf(' in ');\n            var repeatVar = NG_REPEAT.substr(0, inPos), repeatSrc = NG_REPEAT.substr(inPos + 4);\n            var commaPos = repeatVar.indexOf(',');\n            var pipePos = repeatSrc.indexOf('|'), repeatSrcNew;\n            var colonPos, x;\n\n            //store variable name to use for $index later\n            //this is ng-repeat specific, LevelMap[level] is same for ng-if too\n            LevelVarMap[level] = idx;\n            ngRepeatLevel = level;\n\n            if (pipePos > 0) {\n              repeatSrcNew = attachFilter(repeatSrc);\n            } else {\n              colonPos = repeatSrc.indexOf(':');\n              // if (colonPos < 0) {\n                repeatSrcNew = attachScope(repeatSrc);\n              // }\n            }\n\n            // Range: \"i in 1:10\" ==> (for i = 1; i < 10; i++)\n            if (colonPos >= 0) {\n              var start = repeatSrcNew.substr(0, colonPos) || 0, end, step;\n              var anotherColon = repeatSrcNew.indexOf(':', ++colonPos);\n              if (anotherColon > 0) {\n                end = repeatSrcNew.substring(colonPos, anotherColon);\n                step = repeatSrcNew.substr(anotherColon + 1);\n              } else {\n                end = repeatSrcNew.substr(colonPos);\n                step = 1;\n              }\n              // console.log([start, end, step])\n\n              FnText += indent(level, 1) + 'for(var ' +\n                repeatVar + '=' + start + ';' +\n                repeatVar + (step > 0 ? '<' : '>') + end + ';' + repeatVar + '+=' + step + '){\\n';\n              VarMap[repeatVar] = 1;\n\n            // Object: \"k, v in {}\" ==> (for in {})\n            } else if (commaPos > 0) {\n              var key = repeatVar.substr(0, commaPos);\n              var value = repeatVar.substr(commaPos + 1);\n              FnText += indent(level, 1) + 'var ' +\n                value + ',D' + level + '=' + repeatSrcNew + ';\\n';\n              FnText += indent(level, 1) + 'for(var ' + key + ' in D' + level + '){\\n';\n              //                             space is needed for manual uglify  ->  vvv\n              FnText += indent(level) + value + ' = ' + 'D' + level + '[' + key + ']; \\n';\n              VarMap[key] = VarMap[value] = 1;\n\n            // Array: \"k in []\" ==> while loop\n            } else {\n              FnText += indent(level, 1) + 'var ' +\n                repeatVar + ',D' + level + '=' + repeatSrcNew + ','\n                + idx + '=-1,' + l + '=D' + level + '.length;\\n';\n              FnText += indent(level, 1) + 'while(++' + idx + '<' + l + '){\\n';\n              //                        space is needed for manual uglify  ->  vvv\n              FnText += indent(level) + repeatVar + '=D' + level + '[' + idx + ']; \\n';\n              VarMap[repeatVar] = 1;\n            }\n            //remote attribute not to get forwarded to angular\n            attr['ng-repeat'] = void 0;\n          }\n\n          //re-render sub template\n          if (attr.refresh) {\n            customId = 1;\n            oneTimeBinding = attr.refresh.indexOf('::');\n            FnText += indent(level, 2) +\n              (!Watched ? 'var ' + (watchDiff ? '': 'N=1,') + 'T=this;T.W=[];' : '') +\n              'var W={N:N,I:N+\"' + '.' + uniqueId + '\",W:\"' +\n              (oneTimeBinding >=0 ? attr.refresh.substr(oneTimeBinding + 2) + '\",O:1': attr.refresh + '\"') +\n              (attr.compile ? ',C:1' : '') +\n              '};T.W.push(W);\\n';\n            WatchMap[level] = Watched = 1;\n            FnText += indent(level, 2) + 'W.F=function(S,F,$attr,X,N){var R=\"\";\\n';\n            attr.refresh = void 0;\n          }\n\n          if (attr['ng-init']) {\n            FnText += indent(level) + attachScope(attr[\"ng-init\"]) + '; \\n';\n            attr['ng-init'] = void 0;\n          }\n\n          //ng-if to javascript if\n          if (attr['ng-if']) {\n            if (diffLevel) {\n              ngIfLevel = level;\n              ngIfLevels.push(level);\n              ngIfLevelMap[level] = 0;\n            }\n            LevelMap[level] = LevelMap[level] ? LevelMap[level] + 1 : 1;\n            FnText += indent(level, 1) + 'if('+ attachScope(attr['ng-if']) +'){\\n';\n            // console.log('ng-if starts here', level);\n            attr['ng-if'] = void 0;\n          }\n\n          if (attr['elif']) {\n            FnText += indent(level, 1) + 'else if('+ attachScope(attr['elif']) +'){\\n';\n            LevelMap[level] = LevelMap[level] ? LevelMap[level] + 1 : 1;\n            attr['elif'] = void 0;\n          }\n\n          if (typeof attr['else'] !== 'undefined' && !watchDiff) {\n            FnText += indent(level, 1) + 'else{\\n';\n            LevelMap[level] = LevelMap[level] ? LevelMap[level] + 1 : 1;\n            attr['else'] = void 0;\n          }\n\n          //remove +''+ from class, for unnecessary string concat\n          if (attr.class) {\n            parsedAttr.class = interpolate(attr.class);\n            attr.class = void 0;\n          }\n\n          if (attr['ng-class']) {\n            var match;\n            var ngScopedClass = attachScope(attr['ng-class']);\n            parsedAttr.class = parsedAttr.class || '';\n            while((match = ngClassRegex.exec(ngScopedClass)) !== null) {\n              parsedAttr.class +=\n                (\"'+(\" + match[2] + '?' +\n                  \"'\" + (parsedAttr.class ? ' ' : '') + match[1].replace(/['\"]/g, '') +\n                  \"':'')+'\");\n            }\n            attr['ng-class'] = void 0;\n          }\n\n          if (attr['ng-show']) {\n            parsedAttr.class = parsedAttr.class || '';\n            parsedAttr.class += \"'+(\" + attachScope(attr['ng-show']) +\n              \"?'':'\" + (parsedAttr.class ? ' ' : '') + \"ng-hide')+'\";\n            attr['ng-show'] = void 0;\n          }\n\n          if (attr['ng-hide']) {\n            parsedAttr.class = parsedAttr.class || '';\n            parsedAttr.class += \"'+(\" + attachScope(attr['ng-hide']) +\n              \"?'\" + (parsedAttr.class ? ' ' : '') + \"ng-hide':'')+'\";\n            attr['ng-hide'] = void 0;\n          }\n\n          if (options.model && attr['ng-model']) {\n            if (attr['ng-model'].indexOf('$index') >= 0) {\n              parsedAttr['dota-model'] = apply$index(attr['ng-model']);\n            } else {\n              parsedAttr['dota-model'] = attr['ng-model'];\n            }\n            attr['ng-model'] = void 0;\n          }\n\n          if (options.bind && attr['ng-bind']) {\n            if (attr['ng-bind'].indexOf('$index') >= 0) {\n              parsedAttr['dota-bind'] = apply$index(attr['ng-bind']);\n            } else {\n              parsedAttr['dota-bind'] = attr['ng-bind'];\n            }\n            attr['ng-bind'] = void 0;\n          }\n\n          if (attr['ng-value']) {\n            parsedAttr.value = \"'+(\" + attachScope(attr['ng-value']) + \")+'\";\n            attr['ng-value'] = void 0;\n          }\n\n          //some cleanup\n          if (parsedAttr.class) {\n            parsedAttr.class = parsedAttr.class.replace(/\\+''\\+/g, '+');\n          }\n\n          // expand interpolations on attributes, and some more\n          for (x in attr) {\n            attrVal = attr[x];\n            if (attrVal === void 0) { continue; }\n\n            // some ng- attributes\n            if (x.substr(0, 3) === 'ng-') {\n              //some ng-attr are just don't need it here.\n              attrName = x.substr(3);\n              //something like ng-src, ng-href, etc.\n              if (lazyNgAttrRegex.test(attrName)) {\n                x = attrName;\n\n              //convert ng-events to dota-events, to be bind later with native events\n              } else if (options.event && events.indexOf(' ' + attrName + ' ') >= 0) {\n                //add class 'de' for one time querying\n                parsedAttr.class = parsedAttr.class ? 'de ' + parsedAttr.class : 'de';\n                // parsedAttr.de = 1;\n                x = 'de-' + attrName;\n\n              } else if (noValAttrRegex.test(attrName)) {\n                noValAttr += \"'+(\" + attachScope(attrVal) + \"?' \" + attrName + \"=\\\"\\\"':'')+'\";\n                //noValAttr will attach later\n                continue;\n\n              }\n            }\n\n            //ng-repeat loop variables are not available!\n            // only way to acccess is to use $index like \"data[$index]\"\n            // instead of \"item\" as in \"item in data\"\n            parsedAttr[x] = apply$index(interpolate(attrVal));\n          }\n\n        // pass all attributes to angular, except interpolation and $index\n        } else {\n          if (doTAPassThis) {\n            doTAPass = void 0;\n          }\n          //still expand interpolation even if dota-pass is set\n          for (x in attr) {\n            parsedAttr[x] = apply$index(interpolate(attr[x]));;\n          }\n        }\n\n        //write tag back as string\n        FnText += indent(level) + \"R+='<\" + tagName;\n\n        //make id attr come before anything\n        if (customId || watchDiff) {\n          tagId = idHash[uniqueId + '.' + level] = parsedAttr.id || (\"'+N+++'.\" + uniqueId);\n          FnText += ' id=\"' + tagId + '\"';\n          if (parsedAttr.id) {\n            parsedAttr.id = void 0;\n          }\n        }\n\n        //write back attributes\n        for(var k in parsedAttr) {\n          FnText += \" \" + k + '=\"' + parsedAttr[k] + '\"';\n        }\n\n        //attach boolean attributes at last\n        FnText += noValAttr +  (selfClosing ? ' /' : '') + \">';\\n\";\n\n        if (watchDiff) {\n          // FnText += indent(level) + \"N++; \\n\";\n          if (ngIfLevelMap[ngIfLevel] >= 0) {\n            ngIfLevelMap[ngIfLevel]++;\n            // console.log('isPath ngIfCounter', [tagName, ngIfCounter]);\n          }\n        }\n\n        //expand doTA templates with expand=1 option\n        if (attr['dota-render'] && attr.expand) {\n          var attrArray = [];\n          //attach data-X attr, and scope-X attr\n          for(x in attr) {\n            if (!x.indexOf('data-')) {\n              attrArray.push('\"' + x.slice(5) + '\":\"' + attr[x] + '\"');\n            } else if (!x.indexOf('scope-')) {\n              attrArray.push('\"' + x.slice(6) + '\":S[\"' + attr[x] + '\"]');\n            }\n          }\n          FnText += indent(level) + 'var P={' + attrArray.join(',') + '},U=\"' + attr['dota-render'] + '\";\\n';\n          //only expand if renderFn is ready in cache, but not in cache-dom (which unneeded)\n          FnText += indent(level) + 'doTA.C[U]&&!doTA.D[U]&&(R+=doTA.C[U](S,F,P,X)); \\n';\n        }\n\n        level++;\n      },\n\n      //void tag no need to write closing tag\n      voidTag: function() {\n        level--;\n\n        if (diffLevel && level === ngIfLevel && ngIfLevelMap[ngIfLevel] >= 0) {\n          // console.log('ngIfLevelMap1', ngIfLevel, ngIfLevels, ngIfLevelMap);\n          if (ngIfLevelMap[ngIfLevel]) {\n            FnText += indent(level, 1) + \"}else{\" +\n              \"R+='<span id=\\\"'+N+'.\" + uniqueId + '\" hidden=\"\"></span>\\';' +\n              \"N+=\" + ngIfLevelMap[ngIfLevel] + \";}; \\n\";\n          }\n          //save counter\n          ngIfCounterTmp = ngIfLevelMap[ngIfLevel];\n          //clear counter\n          ngIfLevelMap[ngIfLevel] = void 0;\n          //remove last level\n          ngIfLevel = ngIfLevels[--ngIfLevels.length - 1];\n          //add up to previous level\n          if (ngIfLevel) {\n            ngIfLevelMap[ngIfLevel] += ngIfCounterTmp;\n          }\n          // console.log('ngIfLevelMap2', ngIfLevel, ngIfLevels, ngIfLevelMap);\n          if (LevelMap[level] > 0) {\n            LevelMap[level]--;\n          }\n        }\n\n        //close \"if\", \"for\", \"while\" blocks\n        //while is needed because loop and if can be in same tag\n        while (LevelMap[level] > 0) {\n          FnText += indent(level, 1) + '}\\n';\n          LevelMap[level]--;\n        }\n\n        //clear ng-repeat $index\n        if (ngRepeatLevel === level) {\n          LevelVarMap[level] = 0;\n          while (ngRepeatLevel >=0 && typeof LevelVarMap[--ngRepeatLevel] === 'undefined') {}\n        }\n\n        //reset dota-pass when out of scope\n        if (doTAPass >= level) {\n          doTAPass = void 0;\n        }\n      },\n\n      //close tag\n      closeTag: function(tagName) {\n        level--;\n\n        //just write closing tag back\n        FnText += indent(level) + \"R+='</\" + tagName + \">';\\n\";\n\n        //ngIfCounter for most possible uniqueId generation; don't work with loop inside!\n        if (diffLevel && level === ngIfLevel && ngIfLevelMap[ngIfLevel] >= 0) {\n          // console.log('ngIfLevelMap1', ngIfLevel, ngIfLevels, ngIfLevelMap);\n          if (ngIfLevelMap[ngIfLevel]) {\n            FnText += indent(level, 1) + \"}else{\" +\n              \"R+='<\" + tagName + \" id=\\\"'+N+'.\" + uniqueId + '\" hidden=\"\" ' +\n              (tagName === 'img' || tagName === 'input' || tagName === 'br' || tagName === 'hr' ?\n                '/>' : '></' + tagName + '>')\n              + '\\';' +\n              \"N+=\" + ngIfLevelMap[ngIfLevel] + \";}; \\n\";\n          }\n          //save counter\n          ngIfCounterTmp = ngIfLevelMap[ngIfLevel];\n          //clear counter\n          ngIfLevelMap[ngIfLevel] = void 0;\n          //remove last level\n          ngIfLevel = ngIfLevels[--ngIfLevels.length - 1];\n          //add up to previous level\n          if (ngIfLevel) {\n            ngIfLevelMap[ngIfLevel] += ngIfCounterTmp;\n          }\n          // console.log('ngIfLevelMap2', ngIfLevel, ngIfLevels, ngIfLevelMap);\n          if (LevelMap[level] > 0) {\n            LevelMap[level]--;\n          }\n        }\n\n        // console.log('LevelMap1', LevelMap);\n        //close \"if\", \"for\", \"while\" blocks\n        while (LevelMap[level] > 0) {\n          FnText += indent(level, 1) + '}\\n';\n          LevelMap[level]--;\n        }\n        // console.log('LevelMap2', LevelMap);\n\n        if (diffLevel) {\n          if (level === skipLevel) {\n            // console.log('ngIfLevel', [level, skipLevel, ngRepeatLevel])\n            FnText += indent(level, 1) + 'N=O' + level + '; \\n';\n          }\n          if (level === skipLevel) {\n            skipLevel = void 0;\n          }\n        }\n\n        //clear ng-repeat $index\n        if (ngRepeatLevel === level) {\n          LevelVarMap[level] = 0;\n          while (ngRepeatLevel >=0 && typeof LevelVarMap[--ngRepeatLevel] === 'undefined') {}\n        }\n\n        //add blank node if $watch block return nothing, mostly occur with ng-if\n        if (WatchMap[level]) {\n          FnText += indent(level, 1) +\n            \"R=R||('<\" + tagName + ' id=\"' + idHash[uniqueId + '.' + level] +\n            '\" style=\"display:none\"></' + tagName + '>\\');\\n';\n          WatchMap[level] = 0;\n          FnText += indent(level, 2) + 'return R;}; \\n';\n          FnText += indent(level, 2) + 'R+=W.F(S,F,$attr,X,N); \\n';\n        }\n\n        //reset dota-pass when out of scope\n        if (doTAPass >= level) {\n          doTAPass = void 0;\n        }\n      },\n\n      //text node\n      text: function(text) {\n        //console.log([text]);\n        FnText += indent(level) + ('R+=\\'' + interpolate(text) + '\\';\\n')\n          .replace(/\\+''|''\\+/g,'');\n      },\n\n      //comment node\n      comment: function(data) {\n        if (options.comment !== 0) {\n          //console.log(111,[data]);\n          FnText += indent(level) + \"R+='<\" + escapeSingleQuote(data) + \">';\\n\";\n        }\n      }\n    });\n\n    if (watchDiff) {\n      FnText += indent(0) + 'if(X&&J in doTA.H){doTA.diff' + (diffLevel || '') + '(J,R)}' +\n        'doTA.H[J]=R;\\n';\n    }\n\n    FnText += indent(0) +'return R;\\n';\n\n    //Default Optimization\n    // - concat possible lines for performance\n    FnText = FnText.replace(/;R\\+=/g,'+').replace(/'\\+'/g,'');\n\n    //extra optimization, which might take some more CPU\n    if (options.optimize && !watchDiff) {\n      FnText = FnText.replace(removeUnneededQuotesRegex,'$1$2');\n    }\n\n    //print the whole function if debug\n    if (options.debug) {\n      /**/console.log(FnText);\n    }\n    // console.log(FnText);\n\n    try {\n      //$scope, $filter\n      compiledFn = new Function('S', 'F', '$attr', 'X', FnText);\n      if (Watched) {\n        compiledFn = {W:[], F: compiledFn};\n      }\n    } catch (err) {\n      if (typeof console !== \"undefined\") {\n        /**/console.log(\"doTA compile error:\\n\" + FnText);\n      }\n      throw err;\n    }\n\n    // just for less array usage on heap profiling\n    // but this may trigger GC more\n    FnText = LevelMap = LevelVarMap = VarMap = ngIfLevels = ngIfLevelMap = WatchMap = idHash = void 0;\n    return compiledFn;\n  }\n\n  var compiledHash = {};\n  var lastId = 0;\n\n  function initCompileHash(obj) {\n    for (var x in obj) {\n      compiledHash[x] = obj[x];\n      if (obj[x] > lastId) {\n        lastId = obj[x];\n      }\n    }\n  }\n\n  function getUniqueId(key) {\n    if (key) {\n      if (compiledHash[key]) {\n        return compiledHash[key];\n      } else {\n        compiledHash[key] = lastId;\n        return lastId++;\n      }\n    } else {\n      return lastId++;\n    }\n  }\n\n  var doTAObj = {\n    diff: diffPatchExact,\n    diff2: diffPatchChildren,\n    getId: getUniqueId,\n    initCH: initCompileHash,\n    compile: compileHTML,\n    C: {}, //Cached compiled functions\n    D: {}, //Cached DOM to be used by ngDoTA, needed here to prevent unneccessary rendering\n    H: {} //HashMap for TextDiff\n  };\n\n  //warmup most used functions\n  doTAObj.compile('<div class=\"x {{x}}\" ng-class=\"{x:1}\" ng-repeat=\"x in y\" ng-if=\"x\">x{{x}}</div><!--x-->', {\n    watchDiff: 1, diffLevel: 2});\n\n  return doTAObj;\n})();\n\nif (typeof module !== \"undefined\" && module.exports) {\n  module.exports = doTA;\n//IE8\n} else if (typeof console === \"undefined\") {\n  var noop = function() {};\n  console = {log: noop, time: noop, timeEnd: noop};\n}\n"],"sourceRoot":"/source/"}